{"version":3,"sources":["../../src/helpers/ngrok.js"],"names":["publicUrl","getPublicUrl","Promise","resolve","reject","connect","NODE_PORT","err","url"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AACA,IAAIA,YAAY,IAAhB;;AAEA;;;AAGO,IAAMC,sCAAe,SAAfA,YAAe,GAAM;AACjC,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,MAAGJ,SAAH,EAAa;AACZ,UAAOG,QAAQH,SAAR,CAAP;AACA;;AAED,kBAAMK,OAAN,CAAc,eAAWC,SAAzB,EAAoC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjD,OAAGD,GAAH,EAAO;AACN,WAAOH,OAAO,8BAAP,CAAP;AACA;;AAEDJ,eAAYQ,GAAZ;AACAL,WAAQH,SAAR;AACA,GAPD;AAQA,EAdM,CAAP;AAeA,CAhBM","file":"ngrok.js","sourcesContent":["import ngrok from \"ngrok\";\r\nimport configKeys from \"../config/keys\";\r\nlet publicUrl = null;\r\n\r\n/*\r\n * Get public Url\r\n */\r\nexport const getPublicUrl = () => {  \r\n\treturn new Promise((resolve, reject) => {\r\n\r\n\t\tif(publicUrl){\r\n\t\t\treturn resolve(publicUrl);\r\n\t\t}\r\n\r\n\t\tngrok.connect(configKeys.NODE_PORT, (err, url) => {\t\t\t\r\n\t\t\tif(err){\r\n\t\t\t\treturn reject(\"Unable to get the public Url\");\r\n\t\t\t}\r\n\r\n\t\t\tpublicUrl = url;\r\n\t\t\tresolve(publicUrl);\r\n\t\t});\r\n\t});\t\r\n};\r\n\r\n\r\n\r\n"]}