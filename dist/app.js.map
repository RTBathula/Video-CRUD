{"version":3,"sources":["../src/app.js"],"names":["app","use","urlencoded","extended","json","static","__dirname","req","res","next","text","body","JSON","parse","header","get","status","send","ENV","listen","set","NODE_PORT","Promise","resolve","server","process","stdout","write","close"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAGA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAHA;;AAIAA,IAAIC,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAH,IAAIC,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;AACAJ,IAAIC,GAAJ,CAAQ,kBAAQI,MAAR,CAAeC,SAAf,CAAR;;AAEA;AACAN,IAAIC,GAAJ,CAAQ,UAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3B,KAAGF,IAAIG,IAAJ,IAAY,0BAAeH,IAAIG,IAAnB,CAAf,EAAwC;AACvCH,MAAII,IAAJ,GAAWC,KAAKC,KAAL,CAAWN,IAAIG,IAAf,CAAX;AACA;;AAED,KAAGH,IAAII,IAAJ,IAAY,OAAOJ,IAAII,IAAX,KAAqB,QAAjC,IAA6C,0BAAeJ,IAAII,IAAnB,CAAhD,EAAyE;AACxEJ,MAAII,IAAJ,GAAWC,KAAKC,KAAL,CAAWN,IAAII,IAAf,CAAX;AACA;AACDF;AACA,CATD;;AAWA;AACAT,IAAIC,GAAJ,CAAQ,UAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3BD,KAAIM,MAAJ,CAAW,kCAAX,EAA+C,IAA/C;AACAN,KAAIM,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAN,KAAIM,MAAJ,CAAW,8BAAX,EAA2C,wCAA3C;AACAN,KAAIM,MAAJ,CAAW,8BAAX,EAA2C,gEAA3C;AACAL;AACA,CAND;;AAQA;AACAT,IAAIC,GAAJ,CAAQ,GAAR;;AAEA;AACAD,IAAIe,GAAJ,CAAQ,GAAR,EAAa,UAACR,GAAD,EAAMC,GAAN,EAAc;AAC1B,QAAOA,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,qBAAuC,eAAWC,GAAlD,yBAAP;AACA,CAFD;;AAIA;AACO,IAAMC,0BAAS,SAATA,MAAS,GAAM;AAC3BnB,KAAIoB,GAAJ,CAAQ,MAAR,EAAgB,eAAWC,SAA3B;;AAEA,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC/B,MAAMC,SAASxB,IAAImB,MAAJ,CAAWnB,IAAIe,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChD,OAAMC,6BAA2B,eAAWE,GAAtC,qCAAyElB,IAAIe,GAAJ,CAAQ,MAAR,CAA/E;AACAU,WAAQC,MAAR,CAAeC,KAAf,CAAqBX,MAArB,EAFgD,CAEnB;AAC7BO,WAAQC,MAAR;AACA,GAJc,CAAf;AAKA,EANM,CAAP;AAOA,CAVM;;AAYP;AACO,IAAMI,wBAAQ,SAARA,KAAQ,CAACJ,MAAD,EAAY;AAChC,QAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC/BC,SAAOI,KAAP,CAAa,YAAM;AAClBL,+BAA0B,eAAWL,GAArC;AACA,GAFD;AAGA,EAJM,CAAP;AAKA,CANM","file":"app.js","sourcesContent":["import express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nimport configKeys from \"./config/keys\";\r\nimport {isJsonParsable} from \"./helpers/util\";\r\n\r\n//Routes\r\nimport routes from \"./routes/index\";\r\n\r\nconst app = express();\r\napp.use(bodyParser.urlencoded({extended: true}));\r\napp.use(bodyParser.json());\r\napp.use(express.static(__dirname));\r\n\r\n//If req body is a string, convert it to JSON.\r\napp.use((req, res, next) => {\r\n\tif(req.text && isJsonParsable(req.text)){\r\n\t\treq.body = JSON.parse(req.text)\r\n\t}\r\n\r\n\tif(req.body && typeof(req.body) === \"string\" && isJsonParsable(req.body)){\r\n\t\treq.body = JSON.parse(req.body)\r\n\t}  \r\n\tnext()\r\n})  \r\n\r\n//Middleware CORS \r\napp.use((req, res, next) => {\r\n\tres.header(\"Access-Control-Allow-Credentials\", true)\r\n\tres.header(\"Access-Control-Allow-Origin\", \"*\")\r\n\tres.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS, PUT, PATCH, DELETE\")\r\n\tres.header(\"Access-Control-Allow-Headers\", \"X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept\")\r\n\tnext()\r\n})\r\n\r\n//Routes\r\napp.use(\"/\", routes)\r\n\r\n//Default route\r\napp.get(\"/\", (req, res) => {   \r\n\treturn res.status(200).send(`Video CRUD API(${configKeys.ENV}) is up and running`)     \r\n})  \r\n\r\n//Listen express server\r\nexport const listen = () => {   \r\n\tapp.set(\"port\", configKeys.NODE_PORT)\r\n\r\n\treturn new Promise((resolve) => {\r\n\t\tconst server = app.listen(app.get(\"port\"), () => {    \r\n\t\t\tconst status = `Video CRUD API(${configKeys.ENV}) is up and running on PORT: ${app.get(\"port\")}`\r\n\t\t\tprocess.stdout.write(status) //To show in CLI that server is running once success\t\r\n\t\t\tresolve(server)\r\n\t\t})\r\n\t})\r\n}\r\n\r\n//Close express server\r\nexport const close = (server) => {\r\n\treturn new Promise((resolve) => {\r\n\t\tserver.close(() => {  \t\t\t    \r\n\t\t\tresolve(`Video CRUD API(${configKeys.ENV}) server successfully closed`) \r\n\t\t})\r\n\t})  \r\n}\r\n"]}