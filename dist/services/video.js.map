{"version":3,"sources":["../../src/services/video.js"],"names":["createVideo","name","keywords","video","createdDate","Date","Promise","resolve","reject","save","err","savedDoc","getVideoById","id","findOne","_id","getVideoList","find","exec","list","updateVideoById","videoObj","newVideoObj","findOneAndUpdate","new","newDoc","deleteVideoById","deleteOne","resp","deletedCount"],"mappings":";;;;;;;AAAA;;;;;;AAEA;;;;;AAKO,IAAMA,oCAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,QAAP,EAAoB;;AAE9C,KAAIC,QAAQ,qBAAZ;AACAA,OAAMC,WAAN,GAAoB,IAAIC,IAAJ,EAApB;AACAF,OAAMF,IAAN,GAAaA,IAAb;AACAE,OAAMD,QAAN,GAAiBA,QAAjB;;AAEA,QAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCL,QAAMM,IAAN,CAAW,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAC7B,OAAID,GAAJ,EAAS;AACR,WAAOF,OAAOE,GAAP,CAAP;AACA;;AAEDH,WAAQI,QAAR;AACA,GAND;AAOA,EARM,CAAP;AASA,CAhBM;;AAkBP;;;;;AAKO,IAAMC,sCAAe,SAAfA,YAAe,CAACC,EAAD,EAAQ;AACnC,QAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,kBAAMM,OAAN,CAAc,EAACC,KAAKF,EAAN,EAAd,EAAyB,UAACH,GAAD,EAAMP,KAAN,EAAgB;AACxC,OAAGO,GAAH,EAAQ;AACP,WAAOF,OAAOE,GAAP,CAAP;AACA;;AAED,OAAG,CAACP,KAAJ,EAAU;AACT,WAAOK,OAAO,2CAAP,CAAP;AACA;;AAEDD,WAAQJ,KAAR;AACA,GAVD;AAWA,EAZM,CAAP;AAaA,CAdM;;AAiBP;;;;AAIO,IAAMa,sCAAe,SAAfA,YAAe,GAAM;AACjC,QAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,kBAAMS,IAAN,CAAW,EAAX,EAAeC,IAAf,CAAoB,UAACR,GAAD,EAAMS,IAAN,EAAe;AAClC,OAAIT,GAAJ,EAAS;AACR,WAAOF,OAAOE,GAAP,CAAP;AACA;;AAEDH,WAAQY,IAAR;AACA,GAND;AAOA,EARM,CAAP;AASA,CAVM;;AAaP;;;;;AAKO,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACP,EAAD,EAAKQ,QAAL,EAAkB;AAChD,QAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,MAAIc,cAAc;AACjBrB,SAAMoB,SAASpB,IADE;AAEjBC,aAAUmB,SAASnB;AAFF,GAAlB;;AAKA,kBAAMqB,gBAAN,CAAuB,EAACR,KAAKF,EAAN,EAAvB,EAAkCS,WAAlC,EAA+C,EAACE,KAAK,IAAN,EAA/C,EAA4D,UAACd,GAAD,EAAMe,MAAN,EAAiB;AAC5E,OAAIf,GAAJ,EAAS;AACR,WAAOF,OAAOE,GAAP,CAAP;AACA;;AAEDH,WAAQkB,MAAR;AACA,GAND;AAOA,EAdM,CAAP;AAeA,CAhBM;;AAkBP;;;;;AAKO,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACb,EAAD,EAAQ;AACtC,QAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,kBAAMmB,SAAN,CAAgB,EAACZ,KAAKF,EAAN,EAAhB,EAA2B,UAACH,GAAD,EAAMkB,IAAN,EAAe;AACzC,OAAIlB,GAAJ,EAAS;AACR,WAAOF,OAAOE,GAAP,CAAP;AACA;;AAEDH,WAAQqB,KAAKC,YAAb;AACA,GAND;AAOA,EARM,CAAP;AASA,CAVM","file":"video.js","sourcesContent":["import Video from \"../models/video\";\r\n\r\n/*\r\n * Create video object\r\n * @param {name,keywords}\r\n * @return saved video object\r\n */\r\nexport const createVideo = (name, keywords) => {               \r\n     \r\n\tlet video = new Video();\r\n\tvideo.createdDate = new Date();    \r\n\tvideo.name = name;\r\n\tvideo.keywords = keywords;\t\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tvideo.save((err, savedDoc) => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn reject(err);  \r\n\t\t\t}  \r\n\r\n\t\t\tresolve(savedDoc);\t\t      \r\n\t\t});\r\n\t}); \r\n};\r\n\r\n/*\r\n * Get video object by id\r\n * @param id\r\n * @return video object\r\n */\r\nexport const getVideoById = (id) => {     \r\n\treturn new Promise((resolve, reject) => {\r\n\t\tVideo.findOne({_id: id}, (err, video) => {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn reject(err);  \r\n\t\t\t}  \r\n\r\n\t\t\tif(!video){\r\n\t\t\t\treturn reject(\"Unable to find video object with given id\");\r\n\t\t\t}\r\n\r\n\t\t\tresolve(video);\t\t      \r\n\t\t});\r\n\t}); \r\n};\r\n\r\n\r\n/*\r\n * Get video object list\r\n * @return video list(array)\r\n */\r\nexport const getVideoList = () => {     \r\n\treturn new Promise((resolve, reject) => {\r\n\t\tVideo.find({}).exec((err, list) => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn reject(err);  \r\n\t\t\t}     \r\n\r\n\t\t\tresolve(list);\t\t      \r\n\t\t});\r\n\t}); \r\n};\r\n\r\n\r\n/*\r\n * Update video object by id\r\n * @param id,{name,keywords}\r\n * @return success message\r\n */\r\nexport const updateVideoById = (id, videoObj) => {     \r\n\treturn new Promise((resolve, reject) => {\r\n\r\n\t\tlet newVideoObj = { \r\n\t\t\tname: videoObj.name, \r\n\t\t\tkeywords: videoObj.keywords \r\n\t\t};\r\n\r\n\t\tVideo.findOneAndUpdate({_id: id}, newVideoObj, {new: true}, (err, newDoc) => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn reject(err);  \r\n\t\t\t}     \r\n\r\n\t\t\tresolve(newDoc);\t\t      \r\n\t\t});\r\n\t}); \r\n};\r\n\r\n/*\r\n * Delete video object by id\r\n * @param id\r\n * @return success message\r\n */\r\nexport const deleteVideoById = (id) => {     \r\n\treturn new Promise((resolve, reject) => {\r\n\t\tVideo.deleteOne({_id: id}, (err, resp) => {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn reject(err);  \r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tresolve(resp.deletedCount);\t\t      \r\n\t\t});\r\n\t}); \r\n};"]}