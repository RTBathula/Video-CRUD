{"version":3,"sources":["../../src/routes/video.js"],"names":["validate","videoService","router","Router","post","createVideo","req","res","videoObj","body","result","name","keywords","savedObj","status","message","data","json","get","getVideoById","id","params","getVideoList","list","put","updateVideoById","delete","deleteVideoById"],"mappings":"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","file":"video.js","sourcesContent":["import express from \"express\";\r\nimport * as validate from \"../validations/video\";\r\nimport * as videoService from \"../services/video\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * Create video object\r\n * @param {name,keywords}\r\n * @return saved video object\r\n */\r\nrouter.post(\"/\", validate.createVideo, async (req, res) => {\t    \r\n\tlet videoObj = req.body; \r\n\tlet result = {}; \r\n\r\n\ttry{\r\n\t\tlet savedObj = await videoService.createVideo(videoObj.name, videoObj.keywords);\r\n\r\n\t\tresult.status = \"success\";\r\n\t\tresult.message = \"Successfully created\";\r\n\t\tresult.data = savedObj;\r\n\t\treturn res.status(201).json(result);\r\n\r\n\t}catch(err){\r\n\t\tresult.status = \"error\";\t\r\n\t\tresult.message = err.message || \"unable to create. please check video object\";\t\r\n\t\treturn res.status(400).json(result);\r\n\t}  \r\n}); \r\n\r\n/**\r\n * Get video object by id\r\n * @param id\r\n * @return video object\r\n */\r\nrouter.get(\"/:id\", validate.getVideoById, async (req, res) => {\t    \r\n\tlet id = req.params.id;  \r\n\tlet result = {}; \r\n\r\n\ttry{\r\n\t\tlet videoObj = await videoService.getVideoById(id);\r\n\r\n\t\tresult.status = \"success\";\r\n\t\tresult.message = \"Successfully fetched\";\r\n\t\tresult.data = videoObj;\r\n\t\treturn res.status(200).json(result);\r\n\t}catch(err){\r\n\t\tresult.status = \"error\";\t\r\n\t\tresult.message = \"unable to get video by given id\";\r\n\t\treturn res.status(400).json(result);\r\n\t}  \r\n});\r\n\r\n/**\r\n * Get video object list\r\n * @return video list(array)\r\n */\r\nrouter.get(\"/\", async (req, res) => {\t \t \r\n\tlet result = {}; \r\n\r\n\ttry{\r\n\t\tlet list = await videoService.getVideoList();\r\n\r\n\t\tresult.status = \"success\";\r\n\t\tresult.message = \"Successfully fetched video list\";\r\n\t\tresult.data = list;\r\n\t\treturn res.status(200).json(result);\r\n\t}catch(err){\r\n\t\tresult.status = \"error\";\t\r\n\t\tresult.message = \"unable to fetch video list\";\r\n\t\treturn res.status(400).json(result);\r\n\t}  \r\n});\r\n\r\n/**\r\n * Update video object by id\r\n * @param id,{name,keywords}\r\n * @return success message\r\n */\r\nrouter.put(\"/:id\", validate.updateVideoById, async (req, res) => {\t    \r\n\tlet id = req.params.id;  \r\n\tlet videoObj = req.body;\r\n\tlet result = {}; \r\n\r\n\ttry{\r\n\t\tawait videoService.updateVideoById(id, videoObj);\r\n\r\n\t\tresult.status = \"success\";\r\n\t\tresult.message = \"Successfully updated\";\t\t\r\n\t\treturn res.status(200).json(result);\r\n\t}catch(err){\r\n\t\tresult.status = \"error\";\t\r\n\t\tresult.message = \"unable to update video object\";\r\n\t\treturn res.status(400).json(result);\r\n\t}  \r\n});\r\n\r\n/**\r\n * Delete video object by id\r\n * @param id\r\n * @return success message\r\n */\r\n\r\nrouter.delete(\"/:id\", validate.deleteVideoById, async (req, res) => {\t    \r\n\tlet id = req.params.id;  \t\r\n\tlet result = {}; \r\n\r\n\ttry{\r\n\t\tawait videoService.deleteVideoById(id);\r\n\r\n\t\tresult.status = \"success\";\r\n\t\tresult.message = \"Successfully deleted\";\t\t\r\n\t\treturn res.status(200).json(result);\r\n\t}catch(err){\r\n\t\tresult.status = \"error\";\t\r\n\t\tresult.message = \"unable to delete video object with given id\";\r\n\t\treturn res.status(400).json(result);\r\n\t}  \r\n});\r\n\r\nexport default router;\r\n"]}